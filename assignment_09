#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdbool.h>
#include <string.h>
#define SERVER_ADDR "127.0.1.1"
void error(const char *msg)
{
    perror(msg);
    exit(1);
}

int main(int argc, char *argv[])
{
     FILE *fptr,*fptr2,*fptr3;
     char name_file[20],password_file[20],name[20],password[20],ins[]="instructor",best[20],worst[20];
     int sockfd, newsockfd, portno,temp,subject_no,choice,count_login,count_attempt;
     socklen_t clilen;
     bool found=false,loop;
     char buffer[256];
     float marks[5],percentage,average_percentage,min_percentage,max_percentage,min_mark,max_mark,new_marks;
     struct sockaddr_in serv_addr, cli_addr;
     int n,failed[5]={0},c;
     if (argc < 2) {
         fprintf(stderr,"ERROR, no port provided\n");
         exit(1);
     }
     sockfd = socket(AF_INET, SOCK_STREAM, 0);
     if (sockfd < 0)
        error("ERROR opening socket");

     bzero((char *) &serv_addr, sizeof(serv_addr));
     portno = atoi(argv[1]);

     //build server address structure

     serv_addr.sin_family = AF_INET;
     serv_addr.sin_addr.s_addr = INADDR_ANY;
     serv_addr.sin_port = htons(portno);

     //bind local port number

     if (bind(sockfd, (struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0)
              error("ERROR on binding");

     //specify number of concurrent
     //clients to listen for

     listen(sockfd,5);
     while(1){
     printf("\nwaiting for client connection on [IP %s TCP port %d]\n",SERVER_ADDR,portno);

     //Wait for client

     clilen = sizeof(cli_addr);
     newsockfd = accept(sockfd,(struct sockaddr *) &cli_addr,&clilen);
     if (newsockfd < 0)
        error("ERROR on accept");
     else
        printf("received connection from host [IP %s TCP port %d] \n",inet_ntoa(cli_addr.sin_addr),ntohs(cli_addr.sin_port));
     bzero(buffer,256);
     bzero(name,20);
     bzero(password,20);
     count_login=1;

     //open password file

        fptr=fopen("user_pass.txt","r");
        if(fptr==NULL)
            error("Unable to access user password file");
        else
            printf("user password file opened\n");
         do
         {
        //send and receive data from client
            found=false;
            fseek(fptr,0,SEEK_SET);
            n=read(newsockfd,name,20);
            if (n < 0)
                error("ERROR reading from socket");
            n=read(newsockfd,password,20);
            if (n < 0)
                error("ERROR reading from socket");
            while (fscanf(fptr,"%s",name_file)==1)
            {
                fscanf(fptr,"%s",password_file);
                if(!strcmp(name_file,name) && !strcmp(password_file,password))
                {
                    found=true;
                    break;
                }

            }
            if(found==false)
            {
                temp=0;
                n=write(newsockfd,&temp,sizeof(int));
                if (n < 0)
                    error("ERROR writing to socket");
            }
            else
            {
                if(strcmp(name,ins)==0)
                {
                    temp=1;
                    n=write(newsockfd,&temp,sizeof(int));
                    if (n < 0)
                        error("ERROR writing to socket");
                }

                else
                {
                    temp=2;
                    n=write(newsockfd,&temp,sizeof(int));
                    if (n < 0)
                        error("ERROR writing to socket");
                }
            }
            count_login++;
            if(count_login==6)
            {
                fclose(fptr);
                close(newsockfd);
                printf("Client disconnected\n");
                goto endloop;

            }
         }while(temp==0);
        fclose(fptr);
      } 

      //open student marks file

        fptr2=fopen("student_marks.txt","r");
        if(fptr2==NULL)
            error("Unable to access student marks file");
        else
            printf("student marks file opened\n");      

     endloop: printf(" ");	
     return 0;

     string[] lines = File.ReadAllLines("student_marks.txt");
     string[] line = lines[0].Split(" ", split options);
     
}

